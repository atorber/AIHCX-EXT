name: Deploy Docs to GitHub Pages

on:
  push:
    branches: [ main ]
    paths: [ '.qoder/repowiki/zh/**' ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g marked highlight.js

      - name: Build documentation
        run: |
          mkdir -p dist-docs
          mkdir -p dist-docs/content
          
          # 复制所有文档文件
          cp -r .qoder/repowiki/zh/content/* dist-docs/content/
          cp -r .qoder/repowiki/zh/meta dist-docs/
          
          # 创建文档导航索引
          echo "# 生成文档导航索引"
          cat > build-nav.cjs << 'NAVEOF'
          const fs = require('fs');
          const path = require('path');
          
          // 加载元数据
          let metadata = null;
          try {
            const metadataPath = 'dist-docs/meta/repowiki-metadata.json';
            if (fs.existsSync(metadataPath)) {
              metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
              console.log('✅ 成功加载元数据，包含', metadata.wiki_catalogs?.length || 0, '个目录项');
            }
          } catch (e) {
            console.log('⚠️ 无法加载元数据，使用默认排序');
          }
          
          // 创建文档目录映射
          const catalogMap = new Map();
          if (metadata && metadata.wiki_catalogs) {
            metadata.wiki_catalogs.forEach(catalog => {
              catalogMap.set(catalog.name, {
                order: catalog.order || 999,
                description: catalog.description || '',
                name: catalog.name
              });
            });
          }
          
          function scanDirectory(dir, basePath = '') {
            const items = [];
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            
            entries.forEach(entry => {
              if (entry.isDirectory()) {
                // 跳过 meta 目录
                if (entry.name === 'meta') return;
                
                const subItems = scanDirectory(path.join(dir, entry.name), path.join(basePath, entry.name));
                if (subItems.length > 0) {
                  const catalogInfo = catalogMap.get(entry.name);
                  items.push({
                    type: 'folder',
                    name: entry.name,
                    order: catalogInfo?.order || 999,
                    description: catalogInfo?.description || '',
                    children: subItems
                  });
                }
              } else if (entry.name.endsWith('.md')) {
                const filePath = path.join(dir, entry.name);
                let title = entry.name.replace('.md', '');
                
                // 尝试从文件内容提取标题
                try {
                  const content = fs.readFileSync(filePath, 'utf8');
                  const titleMatch = content.match(/^#\s+(.+)$/m);
                  if (titleMatch) {
                    title = titleMatch[1].trim();
                  }
                } catch (e) {
                  console.log('无法读取文件:', filePath);
                }
                
                const catalogInfo = catalogMap.get(title) || catalogMap.get(entry.name.replace('.md', ''));
                items.push({
                  type: 'file',
                  name: entry.name,
                  title: title,
                  path: path.join(basePath, entry.name).replace(/\\/g, '/'),
                  order: catalogInfo?.order || 999,
                  description: catalogInfo?.description || ''
                });
              }
            });
            
            // 按order排序，order相同时按名称排序
            items.sort((a, b) => {
              if (a.order !== b.order) {
                return a.order - b.order;
              }
              return a.name.localeCompare(b.name, 'zh-CN');
            });
            
            return items;
          }
          
          const docs = scanDirectory('dist-docs/content');
          
          // 生成导航数据
          const navData = {
            docs: docs,
            metadata: {
              totalDocs: metadata?.wiki_catalogs?.length || 0,
              generatedAt: new Date().toISOString(),
              hasMetadata: !!metadata
            }
          };
          
          fs.writeFileSync('dist-docs/docs-nav.json', JSON.stringify(navData, null, 2));
          console.log('📚 文档导航生成完成，共处理', docs.length, '个项目');
          
          // 调试导航数据结构
          console.log('📊 导航数据结构验证:');
          console.log('  - docs 类型:', Array.isArray(navData.docs) ? 'Array' : typeof navData.docs);
          console.log('  - docs 长度:', navData.docs ? navData.docs.length : 0);
          console.log('  - metadata 存在:', !!navData.metadata);
          console.log('  - hasMetadata:', navData.metadata?.hasMetadata);
          
          // 打印部分导航数据用于调试
          const debugData = {
            docs: navData.docs.slice(0, 2), // 只显示前2项
            metadata: navData.metadata
          };
          console.log('📋 导航数据样例:', JSON.stringify(debugData, null, 2));
          
          // 打印导航结构预览
          function printStructure(items, indent = '') {
            items.slice(0, 10).forEach(item => { // 只显示前10项
              if (item.type === 'folder') {
                console.log(`${indent}📁 ${item.name} (${item.order})`);
                if (item.children.length > 0) {
                  printStructure(item.children.slice(0, 3), indent + '  ');
                  if (item.children.length > 3) {
                    console.log(`${indent}  ... 还有 ${item.children.length - 3} 项`);
                  }
                }
              } else {
                console.log(`${indent}📄 ${item.title} (${item.order})`);
              }
            });
            if (items.length > 10) {
              console.log(`${indent}... 还有 ${items.length - 10} 项`);
            }
          }
          
          console.log('\n📋 导航结构预览:');
          printStructure(docs);
          NAVEOF
          
          node build-nav.cjs
          
          # 生成主页HTML
          cat > dist-docs/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>AIHC助手扩展 - 文档中心</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css">
              <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
              <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/9.1.6/marked.min.js"></script>
              <style>
                  * { box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif; 
                      margin: 0; padding: 0; line-height: 1.6; color: #24292f; background: #f6f8fa;
                  }
                  .container { display: flex; height: 100vh; }
                  .sidebar { 
                      width: 300px; background: #fff; border-right: 1px solid #d1d9e0; 
                      overflow-y: auto; flex-shrink: 0;
                  }
                  .sidebar-header {
                      padding: 20px; border-bottom: 1px solid #d1d9e0; background: #0969da; color: white;
                  }
                  .sidebar-header h1 { margin: 0; font-size: 1.2em; }
                  .sidebar-content { padding: 10px 0; }
                  .nav-item { 
                      display: block; padding: 8px 20px; color: #24292f; text-decoration: none;
                      border-left: 3px solid transparent; transition: all 0.2s;
                  }
                  .nav-item:hover { background: #f6f8fa; border-left-color: #0969da; }
                  .nav-item.active { background: #e7f3ff; border-left-color: #0969da; font-weight: 600; }
                  .nav-folder { 
                      padding: 8px 20px; font-weight: 600; color: #656d76; 
                      cursor: pointer; user-select: none;
                  }
                  .nav-folder:hover { background: #f6f8fa; }
                  .nav-folder.collapsed + .nav-children { display: none; }
                  .nav-children { margin-left: 20px; }
                  .order-badge {
                      background: #0969da; color: white; font-size: 10px; padding: 2px 6px;
                      border-radius: 10px; margin-left: 8px; font-weight: normal;
                  }
                  .main-content { 
                      flex: 1; display: flex; flex-direction: column; overflow: hidden;
                  }
                  .content-header {
                      background: #fff; padding: 15px 30px; border-bottom: 1px solid #d1d9e0;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  .content-area { 
                      flex: 1; padding: 30px; overflow-y: auto; background: #fff;
                      margin: 20px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  .content-area h1 { margin-top: 0; color: #24292f; }
                  .content-area h2 { margin-top: 30px; padding-bottom: 10px; border-bottom: 1px solid #d1d9e0; }
                  .content-area pre { 
                      background: #f6f8fa; padding: 16px; border-radius: 6px; 
                      overflow-x: auto; border: 1px solid #d1d9e0;
                  }
                  .content-area code { 
                      background: #f6f8fa; padding: 2px 6px; border-radius: 3px; 
                      font-family: 'SFMono-Regular', Consolas, monospace;
                  }
                  .content-area pre code { background: none; padding: 0; }
                  .content-area blockquote {
                      border-left: 4px solid #0969da; padding-left: 16px; 
                      margin-left: 0; color: #656d76;
                  }
                  .content-area table {
                      border-collapse: collapse; width: 100%; margin: 20px 0;
                  }
                  .content-area th, .content-area td {
                      border: 1px solid #d1d9e0; padding: 8px 12px; text-align: left;
                  }
                  .content-area th { background: #f6f8fa; font-weight: 600; }
                  .welcome-content {
                      text-align: center; padding: 60px 40px;
                  }
                  .welcome-content h1 { font-size: 2.5em; margin-bottom: 20px; color: #0969da; }
                  .welcome-content p { font-size: 1.2em; color: #656d76; margin-bottom: 30px; }
                  .feature-grid {
                      display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 20px; margin-top: 40px;
                  }
                  .feature-card {
                      background: #f6f8fa; padding: 20px; border-radius: 8px;
                      border: 1px solid #d1d9e0; text-align: left;
                  }
                  .feature-card h3 { margin-top: 0; color: #0969da; }
                  @media (max-width: 768px) {
                      .container { flex-direction: column; }
                      .sidebar { width: 100%; height: auto; }
                      .main-content { height: calc(100vh - 200px); }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="sidebar">
                      <div class="sidebar-header">
                          <h1>📚 AIHC助手文档</h1>
                      </div>
                      <div class="sidebar-content" id="nav-container">
                          <!-- 导航将通过JavaScript生成 -->
                      </div>
                  </div>
                  
                  <div class="main-content">
                      <div class="content-header">
                          <h2 id="page-title">AIHC助手浏览器扩展</h2>
                      </div>
                      
                      <div class="content-area" id="content">
                          <div class="welcome-content">
                              <h1>🚀 欢迎使用 AIHC助手</h1>
                              <p>为百舸AIHC控制台提供便捷的CLI命令生成、API文档和智能助手功能</p>
                              
                              <div class="feature-grid">
                                  <div class="feature-card">
                                      <h3>🎯 智能识别</h3>
                                      <p>自动识别当前页面并提供相应的功能支持</p>
                                  </div>
                                  <div class="feature-card">
                                      <h3>⚡ 快速操作</h3>
                                      <p>一键生成CLI命令，提高工作效率</p>
                                  </div>
                                  <div class="feature-card">
                                      <h3>📖 完整文档</h3>
                                      <p>详细的API参考和使用指南</p>
                                  </div>
                                  <div class="feature-card">
                                      <h3>🔧 易于扩展</h3>
                                      <p>模块化架构，便于功能扩展</p>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  let docsNav = {};
                  let currentFile = null;
                  
                  // 加载导航数据
                  fetch('docs-nav.json')
                      .then(response => {
                          console.log('🔄 加载 docs-nav.json, 状态:', response.status);
                          if (!response.ok) {
                              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                          }
                          return response.json();
                      })
                      .then(data => {
                          console.log('📊 加载的原始数据类型:', typeof data);
                          console.log('📊 数据键值:', Object.keys(data || {}));
                          
                          // 验证数据结构
                          if (!data) {
                              throw new Error('导航数据为空');
                          }
                          
                          if (!data.docs) {
                              console.error('❌ 数据结构错误: 缺少 docs 字段');
                              console.log('实际数据:', data);
                              throw new Error('数据结构错误: 缺少 docs 字段');
                          }
                          
                          if (!Array.isArray(data.docs)) {
                              console.error('❌ docs 不是数组:', typeof data.docs);
                              throw new Error('docs 字段不是数组');
                          }
                          
                          docsNav = data;
                          console.log('✅ 数据验证成功 - docs数量:', data.docs.length);
                          console.log('📁 元数据信息:', data.metadata);
                          
                          renderNavigation();
                          
                          // 显示元数据信息
                          if (data.metadata?.hasMetadata) {
                              console.log('✅ 使用元数据排序，共', data.metadata.totalDocs, '个文档');
                          } else {
                              console.log('⚠️ 使用默认排序');
                          }
                      })
                      .catch(error => {
                          console.error('❌ 加载导航失败:', error);
                          console.error('Error details:', error.message);
                          
                          // 设置默认数据结构
                          docsNav = {
                              docs: [],
                              metadata: {
                                  hasMetadata: false,
                                  totalDocs: 0,
                                  error: error.message
                              }
                          };
                          
                          // 显示错误信息
                          const container = document.getElementById('nav-container');
                          if (container) {
                              container.innerHTML = `
                                  <div style="padding: 20px; color: #d73a49; background: #ffeef0; margin: 10px; border-radius: 6px;">
                                      <h4>⚠️ 导航加载失败</h4>
                                      <p><strong>错误:</strong> ${error.message}</p>
                                      <details style="margin-top: 10px;">
                                          <summary>点击查看详细信息</summary>
                                          <pre style="background: #f6f8fa; padding: 10px; margin-top: 10px; border-radius: 4px; font-size: 12px;">${error.stack || '无详细信息'}</pre>
                                      </details>
                                      <p style="margin-top: 10px;"><small>请检查控制台获取更多信息</small></p>
                                  </div>
                              `;
                          }
                      });
                  
                  function renderNavigation() {
                      const container = document.getElementById('nav-container');
                      container.innerHTML = renderNavItems(docsNav.docs || []);
                      
                      // 绑定文件夹切换事件
                      container.querySelectorAll('.nav-folder').forEach(folder => {
                          folder.addEventListener('click', function() {
                              this.classList.toggle('collapsed');
                          });
                      });
                  }
                  
                  function renderNavItems(items, level = 0) {
                      return items.map(item => {
                          if (item.type === 'folder') {
                              const orderBadge = item.order !== 999 ? ` <span class="order-badge">${item.order}</span>` : '';
                              return `
                                  <div class="nav-folder" title="顺序: ${item.order}">
                                      📁 ${item.name}${orderBadge}
                                  </div>
                                  <div class="nav-children">
                                      ${renderNavItems(item.children, level + 1)}
                                  </div>
                              `;
                          } else {
                              const orderBadge = item.order !== 999 ? ` <span class="order-badge">${item.order}</span>` : '';
                              return `
                                  <a href="#" class="nav-item" onclick="loadDoc('${item.path}', '${item.title}')" title="顺序: ${item.order}">
                                      📄 ${item.title}${orderBadge}
                                  </a>
                              `;
                          }
                      }).join('');
                  }
                  
                  function loadDoc(filePath, title) {
                      currentFile = filePath;
                      document.getElementById('page-title').textContent = title;
                      
                      // 更新活动状态
                      document.querySelectorAll('.nav-item').forEach(item => {
                          item.classList.remove('active');
                      });
                      event.target.classList.add('active');
                      
                      // 加载Markdown文件
                      fetch(`content/${filePath}`)
                          .then(response => response.text())
                          .then(markdown => {
                              const html = marked.parse(markdown);
                              document.getElementById('content').innerHTML = html;
                              
                              // 高亮代码
                              document.querySelectorAll('pre code').forEach(block => {
                                  hljs.highlightBlock(block);
                              });
                          })
                          .catch(error => {
                              console.error('加载文档失败:', error);
                              document.getElementById('content').innerHTML = 
                                  '<div style="text-align:center;padding:50px;"><h2>❌ 文档加载失败</h2><p>请检查文件路径或网络连接</p></div>';
                          });
                  }
                  
                  // 默认加载第一个文档
                  setTimeout(() => {
                      const firstDoc = findFirstDoc(docsNav.docs || []);
                      if (firstDoc) {
                          loadDoc(firstDoc.path, firstDoc.title);
                      }
                  }, 100);
                  
                  function findFirstDoc(items) {
                      for (const item of items) {
                          if (item.type === 'file') {
                              return item;
                          } else if (item.children) {
                              const found = findFirstDoc(item.children);
                              if (found) return found;
                          }
                      }
                      return null;
                  }
              </script>
          </body>
          </html>
          HTMLEOF
          
          # 创建.nojekyll文件
          touch dist-docs/.nojekyll
          
          echo "📁 Documentation structure:"
          find dist-docs -type f -name "*.md" | head -10
          echo "💾 检查生成的导航文件:"
          if [ -f "dist-docs/docs-nav.json" ]; then
            echo "✅ docs-nav.json 文件存在"
            echo "📋 文件大小: $(wc -c < dist-docs/docs-nav.json) 字符"
            echo "📄 文件内容预览:"
            head -20 dist-docs/docs-nav.json
            echo "..."
          else
            echo "❌ docs-nav.json 文件不存在!"
            echo "📂 dist-docs 目录内容:"
            ls -la dist-docs/
          fi
          echo "✅ Documentation build complete!"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist-docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4